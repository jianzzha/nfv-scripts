# common core list caculation util from Andrew's openvswitch script

function convert_number_range() {
        # converts a range of cpus, like "1-3,5" to a list, like "1,2,3,5"
        local cpu_range=$1
        local cpus_list=""
        local cpus=""
        for cpus in `echo "$cpu_range" | sed -e 's/,/ /g'`; do
                if echo "$cpus" | grep -q -- "-"; then
                        cpus=`echo $cpus | sed -e 's/-/ /'`
                        cpus=`seq --separator=' ' $cpus | sed -e 's/ /,/g'`
                fi
                cpus_list="$cpus_list,$cpus"
        done
        cpus_list=`echo $cpus_list | sed -e 's/^,//'`
        echo "$cpus_list"
}

function subtract_cpus() {
        local current_cpus=$1
        local sub_cpus=$2
        local current_cpus_set
        local count
        local sub_cpu_list=""
        # for easier manipulation, convert the current_cpus string to a associative array
        for i in `echo $current_cpus | sed -e 's/,/ /g'`; do
                current_cpus_set["$i"]=1
        done
        for cpu in "${!current_cpus_set[@]}"; do
                for sub_cpu in `echo $sub_cpus | sed -e 's/,/ /g'`; do
                        if [ "$sub_cpu" == "$cpu" ]; then
                                unset current_cpus_set[$sub_cpu]
                                break
                        fi
                done
        done
        for cpu in "${!current_cpus_set[@]}"; do
                sub_cpu_list="$sub_cpu_list,$cpu"
        done
        sub_cpu_list=`echo $sub_cpu_list | sed -e 's/^,//'`
        echo "$sub_cpu_list"
}

function get_pmd_cpus() {
        local avail_cpus=$1
        local nr_queues=$2
        local nr_devs=$3
        local nr_pmd_threads=`echo "$nr_queues * $nr_devs" | bc`
        local avail_cpus_set
        local count
        local pmd_cpu_list=""
        # for easier manipulation, convert the avail_cpus string to a associative array
        for i in `echo $avail_cpus | sed -e 's/,/ /g'`; do
                avail_cpus_set["$i"]=1
        done
        if ! cat /sys/devices/system/cpu/cpu0/topology/thread_siblings_list | grep -q ','; then
                # when using 1 thread per core (higher per-PMD-thread throughput)
                count=0
                for cpu in "${!avail_cpus_set[@]}"; do
                        pmd_cpu_list="$pmd_cpu_list,$cpu"
                        unset avail_cpus_set[$cpu]
                        ((count++))
                        [ $count -ge $nr_pmd_threads ] && break
                done
        else
                # when using 2 threads per core (higher throuhgput/core)
                count=0
                for cpu in "${!avail_cpus_set[@]}"; do
                        pmd_cpu_hyperthreads=`cat /sys/devices/system/cpu/cpu$cpu/topology/thread_siblings_list`
                        pmd_cpu_hyperthreads=`convert_number_range $pmd_cpu_hyperthreads`
                        for cpu_thread in `echo $pmd_cpu_hyperthreads | sed -e 's/,/ /g'`; do
                                pmd_cpu_list="$pmd_cpu_list,$cpu_thread"
                                unset avail_cpus_set[$cpu_thread]
                                ((count++))
                        done
                        [ $count -ge $nr_pmd_threads ] && break
                done
        fi
        pmd_cpu_list=`echo $pmd_cpu_list | sed -e 's/^,//'`
        echo "$pmd_cpu_list"
}

function get_cpumask() {
        local cpu_list=$1
        local pmd_cpu_mask=0
        local bc_math=""
        for cpu in `echo $cpu_list | sed -e 's/,/ /'g`; do
                bc_math="$bc_math + 2^$cpu"
        done
        bc_math=`echo $bc_math | sed -e 's/\+//'`
        pmd_cpu_mask=`echo "obase=16; $bc_math" | bc`
        echo "$pmd_cpu_mask"
}

function set_cpu_list_vars() {
        all_cpus_list=`cat /sys/devices/system/cpu/online`
        all_cpus_list=`convert_number_range $all_cpus_list`
        local_numa_node=`cat /sys/bus/pci/devices/$1/numa_node`
        local_node_cpus_list=`cat /sys/devices/system/node/node$local_numa_node/cpulist`
        local_node_cpus_list=`convert_number_range "$local_node_cpus_list"`
        local_node_first_cpu=`echo $local_node_cpus_list | awk -F, '{print $1}'`
        local_node_first_cpu_threads_list=`cat /sys/devices/system/cpu/cpu$local_node_first_cpu/topology/thread_siblings_list`
        local_node_first_cpu_threads_list=`convert_number_range $local_node_first_cpu_threads_list`
        ded_cpus_list=`subtract_cpus $local_node_cpus_list $local_node_first_cpu_threads_list`
        all_nodes_non_ded_cpus_list=`subtract_cpus $all_cpus_list $ded_cpus_list`
        local_node_non_ded_cpus_list=`subtract_cpus $local_node_cpus_list $ded_cpus_list`
        echo "dedicated cpus_list is $ded_cpus_list"
        echo "local-node-non-dedicated cpus list is $local_node_non_ded_cpus_list"
        echo "all-nodes-non-dedicated cpus list is $all_nodes_non_ded_cpus_list"
}




